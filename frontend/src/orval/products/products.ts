/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * Gestao de Marketplace API
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  GetApiProducts200,
  GetApiProducts500,
  GetApiProductsParams,
  PatchApiProductsIdProduct200,
  PatchApiProductsIdProduct404,
  PatchApiProductsIdProduct500,
  PatchApiProductsIdProductBody,
  PatchApiProductsIdProductPhotoUpload404,
  PatchApiProductsIdProductPhotoUpload500,
  PatchApiProductsIdProductPhotoUploadBody,
  PostApiProducts201,
  PostApiProducts500,
  PostApiProductsBody
} from '../api.schemas';

import { customInstance } from '../../lib/axios';
import type { ErrorType , BodyType } from '../../lib/axios';


type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];



export const patchApiProductsIdProductPhotoUpload = (
    idProduct: number,
    patchApiProductsIdProductPhotoUploadBody: BodyType<PatchApiProductsIdProductPhotoUploadBody>,
 options?: SecondParameter<typeof customInstance>,) => {
      
      const formData = new FormData();
formData.append(`file`, patchApiProductsIdProductPhotoUploadBody.file)

      return customInstance<void>(
      {url: `/api/products/${idProduct}/photo/upload`, method: 'PATCH',
      headers: {'Content-Type': 'multipart/form-data', },
       data: formData
    },
      options);
    }
  


export const getPatchApiProductsIdProductPhotoUploadMutationOptions = <TError = ErrorType<PatchApiProductsIdProductPhotoUpload404 | PatchApiProductsIdProductPhotoUpload500>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof patchApiProductsIdProductPhotoUpload>>, TError,{idProduct: number;data: BodyType<PatchApiProductsIdProductPhotoUploadBody>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof patchApiProductsIdProductPhotoUpload>>, TError,{idProduct: number;data: BodyType<PatchApiProductsIdProductPhotoUploadBody>}, TContext> => {

const mutationKey = ['patchApiProductsIdProductPhotoUpload'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof patchApiProductsIdProductPhotoUpload>>, {idProduct: number;data: BodyType<PatchApiProductsIdProductPhotoUploadBody>}> = (props) => {
          const {idProduct,data} = props ?? {};

          return  patchApiProductsIdProductPhotoUpload(idProduct,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PatchApiProductsIdProductPhotoUploadMutationResult = NonNullable<Awaited<ReturnType<typeof patchApiProductsIdProductPhotoUpload>>>
    export type PatchApiProductsIdProductPhotoUploadMutationBody = BodyType<PatchApiProductsIdProductPhotoUploadBody>
    export type PatchApiProductsIdProductPhotoUploadMutationError = ErrorType<PatchApiProductsIdProductPhotoUpload404 | PatchApiProductsIdProductPhotoUpload500>

    export const usePatchApiProductsIdProductPhotoUpload = <TError = ErrorType<PatchApiProductsIdProductPhotoUpload404 | PatchApiProductsIdProductPhotoUpload500>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof patchApiProductsIdProductPhotoUpload>>, TError,{idProduct: number;data: BodyType<PatchApiProductsIdProductPhotoUploadBody>}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof patchApiProductsIdProductPhotoUpload>>,
        TError,
        {idProduct: number;data: BodyType<PatchApiProductsIdProductPhotoUploadBody>},
        TContext
      > => {

      const mutationOptions = getPatchApiProductsIdProductPhotoUploadMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const getApiProducts = (
    params?: GetApiProductsParams,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<GetApiProducts200>(
      {url: `/api/products/`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetApiProductsQueryKey = (params?: GetApiProductsParams,) => {
    return [`/api/products/`, ...(params ? [params]: [])] as const;
    }

    
export const getGetApiProductsQueryOptions = <TData = Awaited<ReturnType<typeof getApiProducts>>, TError = ErrorType<GetApiProducts500>>(params?: GetApiProductsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiProducts>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiProductsQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiProducts>>> = ({ signal }) => getApiProducts(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiProducts>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiProductsQueryResult = NonNullable<Awaited<ReturnType<typeof getApiProducts>>>
export type GetApiProductsQueryError = ErrorType<GetApiProducts500>


export function useGetApiProducts<TData = Awaited<ReturnType<typeof getApiProducts>>, TError = ErrorType<GetApiProducts500>>(
 params: undefined |  GetApiProductsParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiProducts>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiProducts>>,
          TError,
          Awaited<ReturnType<typeof getApiProducts>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiProducts<TData = Awaited<ReturnType<typeof getApiProducts>>, TError = ErrorType<GetApiProducts500>>(
 params?: GetApiProductsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiProducts>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiProducts>>,
          TError,
          Awaited<ReturnType<typeof getApiProducts>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiProducts<TData = Awaited<ReturnType<typeof getApiProducts>>, TError = ErrorType<GetApiProducts500>>(
 params?: GetApiProductsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiProducts>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetApiProducts<TData = Awaited<ReturnType<typeof getApiProducts>>, TError = ErrorType<GetApiProducts500>>(
 params?: GetApiProductsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiProducts>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiProductsQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const postApiProducts = (
    postApiProductsBody: BodyType<PostApiProductsBody>,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<PostApiProducts201>(
      {url: `/api/products/`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postApiProductsBody, signal
    },
      options);
    }
  


export const getPostApiProductsMutationOptions = <TError = ErrorType<PostApiProducts500>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiProducts>>, TError,{data: BodyType<PostApiProductsBody>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof postApiProducts>>, TError,{data: BodyType<PostApiProductsBody>}, TContext> => {

const mutationKey = ['postApiProducts'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiProducts>>, {data: BodyType<PostApiProductsBody>}> = (props) => {
          const {data} = props ?? {};

          return  postApiProducts(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiProductsMutationResult = NonNullable<Awaited<ReturnType<typeof postApiProducts>>>
    export type PostApiProductsMutationBody = BodyType<PostApiProductsBody>
    export type PostApiProductsMutationError = ErrorType<PostApiProducts500>

    export const usePostApiProducts = <TError = ErrorType<PostApiProducts500>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiProducts>>, TError,{data: BodyType<PostApiProductsBody>}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postApiProducts>>,
        TError,
        {data: BodyType<PostApiProductsBody>},
        TContext
      > => {

      const mutationOptions = getPostApiProductsMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const patchApiProductsIdProduct = (
    idProduct: number,
    patchApiProductsIdProductBody: BodyType<PatchApiProductsIdProductBody>,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<PatchApiProductsIdProduct200>(
      {url: `/api/products/${idProduct}`, method: 'PATCH',
      headers: {'Content-Type': 'application/json', },
      data: patchApiProductsIdProductBody
    },
      options);
    }
  


export const getPatchApiProductsIdProductMutationOptions = <TError = ErrorType<PatchApiProductsIdProduct404 | PatchApiProductsIdProduct500>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof patchApiProductsIdProduct>>, TError,{idProduct: number;data: BodyType<PatchApiProductsIdProductBody>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof patchApiProductsIdProduct>>, TError,{idProduct: number;data: BodyType<PatchApiProductsIdProductBody>}, TContext> => {

const mutationKey = ['patchApiProductsIdProduct'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof patchApiProductsIdProduct>>, {idProduct: number;data: BodyType<PatchApiProductsIdProductBody>}> = (props) => {
          const {idProduct,data} = props ?? {};

          return  patchApiProductsIdProduct(idProduct,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PatchApiProductsIdProductMutationResult = NonNullable<Awaited<ReturnType<typeof patchApiProductsIdProduct>>>
    export type PatchApiProductsIdProductMutationBody = BodyType<PatchApiProductsIdProductBody>
    export type PatchApiProductsIdProductMutationError = ErrorType<PatchApiProductsIdProduct404 | PatchApiProductsIdProduct500>

    export const usePatchApiProductsIdProduct = <TError = ErrorType<PatchApiProductsIdProduct404 | PatchApiProductsIdProduct500>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof patchApiProductsIdProduct>>, TError,{idProduct: number;data: BodyType<PatchApiProductsIdProductBody>}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof patchApiProductsIdProduct>>,
        TError,
        {idProduct: number;data: BodyType<PatchApiProductsIdProductBody>},
        TContext
      > => {

      const mutationOptions = getPatchApiProductsIdProductMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    