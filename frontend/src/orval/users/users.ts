/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * Gestao de Marketplace API
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation
} from '@tanstack/react-query';
import type {
  MutationFunction,
  QueryClient,
  UseMutationOptions,
  UseMutationResult
} from '@tanstack/react-query';

import type {
  PatchApiUsersPhotoUploadBody
} from '../api.schemas';

import { customInstance } from '../../lib/axios';
import type { ErrorType , BodyType } from '../../lib/axios';


type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];



export const patchApiUsersPhotoUpload = (
    patchApiUsersPhotoUploadBody: BodyType<PatchApiUsersPhotoUploadBody>,
 options?: SecondParameter<typeof customInstance>,) => {
      
      const formData = new FormData();
formData.append(`file`, patchApiUsersPhotoUploadBody.file)

      return customInstance<void>(
      {url: `http://localhost:3000/api/users/photo/upload`, method: 'PATCH',
      headers: {'Content-Type': 'multipart/form-data', },
       data: formData
    },
      options);
    }
  


export const getPatchApiUsersPhotoUploadMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof patchApiUsersPhotoUpload>>, TError,{data: BodyType<PatchApiUsersPhotoUploadBody>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof patchApiUsersPhotoUpload>>, TError,{data: BodyType<PatchApiUsersPhotoUploadBody>}, TContext> => {

const mutationKey = ['patchApiUsersPhotoUpload'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof patchApiUsersPhotoUpload>>, {data: BodyType<PatchApiUsersPhotoUploadBody>}> = (props) => {
          const {data} = props ?? {};

          return  patchApiUsersPhotoUpload(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PatchApiUsersPhotoUploadMutationResult = NonNullable<Awaited<ReturnType<typeof patchApiUsersPhotoUpload>>>
    export type PatchApiUsersPhotoUploadMutationBody = BodyType<PatchApiUsersPhotoUploadBody>
    export type PatchApiUsersPhotoUploadMutationError = ErrorType<unknown>

    export const usePatchApiUsersPhotoUpload = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof patchApiUsersPhotoUpload>>, TError,{data: BodyType<PatchApiUsersPhotoUploadBody>}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof patchApiUsersPhotoUpload>>,
        TError,
        {data: BodyType<PatchApiUsersPhotoUploadBody>},
        TContext
      > => {

      const mutationOptions = getPatchApiUsersPhotoUploadMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    