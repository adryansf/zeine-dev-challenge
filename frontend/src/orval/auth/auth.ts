/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * Gestao de Marketplace API
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation
} from '@tanstack/react-query';
import type {
  MutationFunction,
  QueryClient,
  UseMutationOptions,
  UseMutationResult
} from '@tanstack/react-query';

import type {
  PostApiAuthSignIn200,
  PostApiAuthSignIn400,
  PostApiAuthSignInBody,
  PostApiAuthSignUp200,
  PostApiAuthSignUp400,
  PostApiAuthSignUpBody
} from '../api.schemas';

import { customInstance } from '../../lib/axios';
import type { ErrorType , BodyType } from '../../lib/axios';


type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];



export const postApiAuthSignUp = (
    postApiAuthSignUpBody: BodyType<PostApiAuthSignUpBody>,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<PostApiAuthSignUp200>(
      {url: `http://localhost:3000/api/auth/sign-up`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postApiAuthSignUpBody, signal
    },
      options);
    }
  


export const getPostApiAuthSignUpMutationOptions = <TError = ErrorType<PostApiAuthSignUp400>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiAuthSignUp>>, TError,{data: BodyType<PostApiAuthSignUpBody>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof postApiAuthSignUp>>, TError,{data: BodyType<PostApiAuthSignUpBody>}, TContext> => {

const mutationKey = ['postApiAuthSignUp'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiAuthSignUp>>, {data: BodyType<PostApiAuthSignUpBody>}> = (props) => {
          const {data} = props ?? {};

          return  postApiAuthSignUp(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiAuthSignUpMutationResult = NonNullable<Awaited<ReturnType<typeof postApiAuthSignUp>>>
    export type PostApiAuthSignUpMutationBody = BodyType<PostApiAuthSignUpBody>
    export type PostApiAuthSignUpMutationError = ErrorType<PostApiAuthSignUp400>

    export const usePostApiAuthSignUp = <TError = ErrorType<PostApiAuthSignUp400>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiAuthSignUp>>, TError,{data: BodyType<PostApiAuthSignUpBody>}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postApiAuthSignUp>>,
        TError,
        {data: BodyType<PostApiAuthSignUpBody>},
        TContext
      > => {

      const mutationOptions = getPostApiAuthSignUpMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const postApiAuthSignIn = (
    postApiAuthSignInBody: BodyType<PostApiAuthSignInBody>,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<PostApiAuthSignIn200>(
      {url: `http://localhost:3000/api/auth/sign-in`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postApiAuthSignInBody, signal
    },
      options);
    }
  


export const getPostApiAuthSignInMutationOptions = <TError = ErrorType<PostApiAuthSignIn400>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiAuthSignIn>>, TError,{data: BodyType<PostApiAuthSignInBody>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof postApiAuthSignIn>>, TError,{data: BodyType<PostApiAuthSignInBody>}, TContext> => {

const mutationKey = ['postApiAuthSignIn'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiAuthSignIn>>, {data: BodyType<PostApiAuthSignInBody>}> = (props) => {
          const {data} = props ?? {};

          return  postApiAuthSignIn(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiAuthSignInMutationResult = NonNullable<Awaited<ReturnType<typeof postApiAuthSignIn>>>
    export type PostApiAuthSignInMutationBody = BodyType<PostApiAuthSignInBody>
    export type PostApiAuthSignInMutationError = ErrorType<PostApiAuthSignIn400>

    export const usePostApiAuthSignIn = <TError = ErrorType<PostApiAuthSignIn400>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiAuthSignIn>>, TError,{data: BodyType<PostApiAuthSignInBody>}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postApiAuthSignIn>>,
        TError,
        {data: BodyType<PostApiAuthSignInBody>},
        TContext
      > => {

      const mutationOptions = getPostApiAuthSignInMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    